@model BlogVM
<style>
    .error-span {
        color: red;
        font-size: 18px;
        font-weight: 650;
        margin-left: 5px;
    }

    .iti {
        width: 100%;
    }

    .right-sidebar-item {
        overflow: hidden;
        height: 550px;
        padding-bottom: 20px;
    }


    .checkboxes {
        width: 100%;
        background: rgb(240, 240, 240);
        padding: 20px;
        overflow: scroll;
        max-height: 450px;
        overflow-x: hidden;
        border-radius: 20px;
    }

        .checkboxes::-webkit-scrollbar {
            display: none;
        }

    .search {
        width: 100%;
        border-radius: 3mm;
        padding: 10px;
        outline: none;
        border: 1px solid gray;
    }

    .select_label {
        display: block;
        padding: 10px 0;
    }

        .select_label h4 {
            display: inline-block;
            margin: 0;
        }

    input.checkbox {
        width: 20px;
        height: 20px;
    }

    .checkbox {
        margin-right: 10px;
    }

    .ck-editor__editable[role="textbox"] {
        min-height: 300px;
    }
</style>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Title" class="control-label">Blog Başlığı</label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CategoryOfBlogID" class="control-label">Kategoriya adı</label>
                <select asp-for="CategoryOfBlogID" class="form-control">
                    @foreach (var item in ViewData["Categories"] as IEnumerable<CategoryOfBlog>)
                    {
                        <option value="@item.ID">@item.Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Açıqlama</label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Text" class="control-label">Mətn</label>
                <textarea asp-for="Text" id="text" class="form-control"></textarea>
                <span asp-validation-for="Text" class="text-danger"></span>
            </div>
            <div class="col-lg-8">
                <div class="col-lg-12">
                    <div class="card-body card shadow right-sidebar-item">
                        <div class="form-group">
                            <label>Müəllimlər:</label>
                            <div id="checkboxes2" class="checkboxes">



                                @foreach (var tag in ViewData["Tags"] as IEnumerable<Tag>)
                                {
                                    var isSelected = ViewData["SelectedClassTagIds"] != null && ((List<int>)ViewData["SelectedClassTagIds"]).Contains(tag.ID);
                                    <label for="@tag.Name" class="select_label">
                                        <input type="checkbox" class="checkbox" value="@tag.ID.ToString()" name="tagIds" id="@tag.Name" @(isSelected ? "checked" : "") />
                                        @tag.Name
                                        <span class="select_label-icon"></span>
                                    </label>
                                }



                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group d-flex align-items-center">
                <span style="margin-right:1rem;">Ana səhifədə olsun:</span>
                <input asp-for="IsHome" type="checkbox" checked="@Model.IsHome" />
            </div>

            <div class="form-group" style="min-height:300px;">
                <div class="card">
                    <div class="card-body">
                        <img class="img-fluid" src="@Model.PhotoUrl" />
                    </div>
                    <div class="card p-3 mt-3">
                        <input type="file" asp-for="PhotoUrl" name="PhotoUrl" />
                    </div>
                </div>
            </div>

            @* <div class="form-group">
                <label asp-for="PhotoUrl" class="control-label">Şəkil</label>
                <input asp-for="PhotoUrl" name="PhotoUrl" class="form-control" type="file" />
                <span asp-validation-for="PhotoUrl" class="text-danger"></span>
            </div> *@
            <input type="hidden" asp-for="ID" />
            <div class="form-group">
                <input type="submit" value="@DefaultConstantValue.ADD_MESSAGE" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">@DefaultConstantValue.RETURN_TO_BACK</a>
</div>

<script>
    // Checkbox işareti değiştiğinde, ilgili öğretmenin ID'sini gönder
    $('.checkbox').change(function () {
        if (!this.checked) {
            var tagID = $(this).val();
            $('<input>').attr({
                type: 'hidden',
                name: 'tagIdsToRemove',
                value: tagID
            }).appendTo('#editForm');
        }
    });
</script>
<script>
    class MyUploadAdapter {
    constructor( loader ) {
        // The file loader instance to use during the upload. It sounds scary but do not
        // worry — the loader will be passed into the adapter later on in this guide.
        this.loader = loader;
    }

     // Starts the upload process.
    upload() {
        return this.loader.file
            .then( file => new Promise( ( resolve, reject ) => {
                this._initRequest();
                this._initListeners( resolve, reject, file );
                this._sendRequest( file );
            } ) );
    }

    // Aborts the upload process.
    abort() {
        if ( this.xhr ) {
            this.xhr.abort();
        }
    }

    // Initializes the XMLHttpRequest object using the URL passed to the constructor.
    _initRequest() {
        const xhr = this.xhr = new XMLHttpRequest();

        // Note that your request may look different. It is up to you and your editor
        // integration to choose the right communication channel. This example uses
        // a POST request with JSON as a data structure but your configuration
        // could be different.
        xhr.open( 'POST', '@Url.Action("UploadImage","Blog")', true );
        xhr.responseType = 'json';
    }
    // Initializes XMLHttpRequest listeners.
    _initListeners( resolve, reject, file ) {
        const xhr = this.xhr;
        const loader = this.loader;
        const genericErrorText = `Couldn't upload file: ${ file.name }.`;

        xhr.addEventListener( 'error', () => reject( genericErrorText ) );
        xhr.addEventListener( 'abort', () => reject() );
        xhr.addEventListener( 'load', () => {
            const response = xhr.response;

            // This example assumes the XHR server's "response" object will come with
            // an "error" which has its own "message" that can be passed to reject()
            // in the upload promise.
            //
            // Your integration may handle upload errors in a different way so make sure
            // it is done properly. The reject() function must be called when the upload fails.
            if ( !response || response.error ) {
                return reject( response && response.error ? response.error.message : genericErrorText );
            }

            // If the upload is successful, resolve the upload promise with an object containing
            // at least the "default" URL, pointing to the image on the server.
            // This URL will be used to display the image in the content. Learn more in the
            // UploadAdapter#upload documentation.
            resolve( {
                default: response.url
            } );
        } );

        // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
        // properties which are used e.g. to display the upload progress bar in the editor
        // user interface.
        if ( xhr.upload ) {
            xhr.upload.addEventListener( 'progress', evt => {
                if ( evt.lengthComputable ) {
                    loader.uploadTotal = evt.total;
                    loader.uploaded = evt.loaded;
                }
            } );
        }
    }
    // Prepares the data and sends the request.
    _sendRequest( file ) {
        // Prepare the form data.
        const data = new FormData();

        data.append( 'upload', file );

        // Important note: This is the right place to implement security mechanisms
        // like authentication and CSRF protection. For instance, you can use
        // XMLHttpRequest.setRequestHeader() to set the request headers containing
        // the CSRF token generated earlier by your application.

        // Send the request.
        this.xhr.send( data );
    }

function MyCustomUploadAdapterPlugin( editor ) {
    editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {
        // Configure the URL to the upload script in your backend here!
        return new MyUploadAdapter( loader );
    };
}
    ClassicEditor
        .create(document.querySelector('#text'),{
            extraPlugins: [ MyCustomUploadAdapterPlugin ],
        })
        .then(editor=>{
            window.editor = editor;
        })
        .catch(err=>{
            console.error(err.stack);
        });

</script>

